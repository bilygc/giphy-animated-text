[{"D:\\hiperb0re0\\Documents\\Dev\\giphy-animated-text\\src\\index.js":"1","D:\\hiperb0re0\\Documents\\Dev\\giphy-animated-text\\src\\App.js":"2","D:\\hiperb0re0\\Documents\\Dev\\giphy-animated-text\\src\\reportWebVitals.js":"3","D:\\hiperb0re0\\Documents\\Dev\\giphy-animated-text\\src\\components\\Error.js":"4","D:\\hiperb0re0\\Documents\\Dev\\giphy-animated-text\\src\\components\\TextList.js":"5","D:\\hiperb0re0\\Documents\\Dev\\giphy-animated-text\\src\\serviceWorker.js":"6"},{"size":578,"mtime":1631292065695,"results":"7","hashOfConfig":"8"},{"size":3135,"mtime":1631291350710,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"8"},{"size":214,"mtime":1631144478209,"results":"11","hashOfConfig":"8"},{"size":547,"mtime":1631289111329,"results":"12","hashOfConfig":"8"},{"size":5868,"mtime":1631292210481,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},"19d9hcu",{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\hiperb0re0\\Documents\\Dev\\giphy-animated-text\\src\\index.js",["30"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nserviceWorker.register();\n//reportWebVitals();\n","D:\\hiperb0re0\\Documents\\Dev\\giphy-animated-text\\src\\App.js",["31"],"import { GiphyFetch } from '@giphy/js-fetch-api'\nimport {useState} from 'react'\nimport TextList from './components/TextList'\nimport Error from './components/Error'\nimport './App.css';\n\nconst giphy = new GiphyFetch(process.env.REACT_APP_GIPHY_KEY)\n\nfunction App() {\n  const [text, setText] = useState('')\n  const [results, setResults] = useState([])\n  const [err, setErr] = useState(false)\n  const [loading, setLoading] = useState(false)\n\n  const handleInput = (e) => {\n    setText(e.target.value)\n  }\n\n  const handleKeyDown = (e) => {\n    if(e.key === 'Enter'){\n      handleSubmit(e);\n    }\n  }\n\n  const handleSubmit = (e) => {\n    if(text.length === 0) {\n      \n      //set error state to true\n      setErr(true)\n      return\n    }\n\n\n    const apiCall = async () => {\n      setLoading(true)\n      const res = await giphy.animate(text, {limit: 20})\n      setResults(res.data)\n      setLoading(false)\n      console.log(\"response: \",results)\n    }\n    \n    apiCall()\n    setText('')\n    setErr(false)\n\n  }\n\n  const loadingScreen = () =>{\n    let style = {}\n\n    if(loading){\n      style = {display:\"block\"}\n    }\n    if(!loading){\n      style = {display:\"none\"}\n    }\n    return style\n  }\n  \n  return (\n    <div className=\"grid grid-cols-4 gap-4 px-4 text-center mb-10 md:max-w-screen-sm md:mx-auto lg:max-w-screen-md xl:max-w-screen-lg 2xl:max-w-screen-xl\">\n      <picture className=\"-my-10 col-span-4 mx-auto\"> \n        <source  media=\"(min-width: 768px)\" srcSet=\"https://text.media.giphy.com/v1/media/giphy-preview.gif?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJrZXkiOiJwcm9kLTIwMjAtMDQtMjIiLCJzdHlsZSI6InBhcnR5dGltZSIsInRleHQiOiJBbmltYXRlZCB0ZXh0IGdlbmVyYXRvciIsImlhdCI6MTYzMTE1NDc5Mn0.Lr-I4TXqlui20Psc_qvfGY38Vk3_drSyNeCWMoUWu3I&cid=58b58c32305f3f7998303f9743e3ad7a159c507276fff98b&dynamic_style=partytime&rid=giphy-preview.gif&ct=t\" />\n        <img src=\"https://text.media.giphy.com/v1/media/giphy-preview.webp?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJrZXkiOiJwcm9kLTIwMjAtMDQtMjIiLCJzdHlsZSI6InBhcnR5dGltZSIsInRleHQiOiJBbmltYXRlZCB0ZXh0IGdlbmVyYXRvciIsImlhdCI6MTYzMTE1NDc5Mn0.Lr-I4TXqlui20Psc_qvfGY38Vk3_drSyNeCWMoUWu3I&cid=58b58c32305f3f7998303f9743e3ad7a159c507276fff98b&dynamic_style=partytime&rid=giphy-preview.webp&ct=t\" alt=\"animated text generator\" />\n      </picture>\n      <h3 className=\"mb-3 col-span-4\">Type text into the form and hit submit or press return</h3>\n      <input placeholder=\"type text to animate\" type=\"text\" className=\"border-2 border-gray-300 col-span-3\" value={text} onChange={handleInput} onKeyDown={handleKeyDown} />\n      <button className=\"border-2 border-gray-300 rounded hover:border-gray-500 col-span-1\" onClick={handleSubmit}>Submit</button>\n      <Error isError={err} className=\"col-span-4\" text=\"need length longer than 0 for input\"/>\n      <div className=\"col-span-4 mx-auto\" style={loadingScreen()} >\n        <img src=\"./loading.gif\" alt=\"loading image\" />\n      </div>\n      {results && <TextList gifs={results} />}\n      <div className=\"col-span-4 sticky bottom-0 bg-white py-3 bg-red-100\">\n        <h3>Made with ❤ by Bily</h3>\n      </div>\n    </div>\n  );\n}\nexport default App;",["32","33"],"D:\\hiperb0re0\\Documents\\Dev\\giphy-animated-text\\src\\reportWebVitals.js",[],"D:\\hiperb0re0\\Documents\\Dev\\giphy-animated-text\\src\\components\\Error.js",[],"D:\\hiperb0re0\\Documents\\Dev\\giphy-animated-text\\src\\components\\TextList.js",["34"],"const TextList = (props) => {\r\n    const items = props.gifs.map((itemData) => {\r\n      return <Item url={itemData.url} gifstyle={itemData.animated_text_style} />;\r\n    });\r\n    return <div className=\"col-span-4 grid grid-cols-2 gap-y-8 xl:grid-cols-4\">{items}</div>;\r\n  };\r\n  \r\n  const Item = (props) => {\r\n    return (\r\n      <div className=\"gif-item lg:hover:shadow-lg\">\r\n        <img src={props.url} />\r\n        <span className=\"text-md font-bold block pb-3\">{props.gifstyle} style</span>\r\n      </div>\r\n    );\r\n  };\r\n  export default TextList;","D:\\hiperb0re0\\Documents\\Dev\\giphy-animated-text\\src\\serviceWorker.js",[],{"ruleId":"35","severity":1,"message":"36","line":5,"column":8,"nodeType":"37","messageId":"38","endLine":5,"endColumn":23},{"ruleId":"39","severity":1,"message":"40","line":71,"column":9,"nodeType":"41","endLine":71,"endColumn":56},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":11,"column":9,"nodeType":"41","endLine":11,"endColumn":32},"no-unused-vars","'reportWebVitals' is defined but never used.","Identifier","unusedVar","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-native-reassign",["48"],"no-negated-in-lhs",["49"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-global-assign","no-unsafe-negation"]