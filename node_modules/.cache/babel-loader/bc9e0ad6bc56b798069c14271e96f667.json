{"ast":null,"code":"var _jsxFileName = \"D:\\\\hiperb0re0\\\\Documents\\\\Dev\\\\giphy-animated-text\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { GiphyFetch } from '@giphy/js-fetch-api';\nimport { useState } from 'react';\nimport TextList from './components/TextList';\nimport Error from './components/Error';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst giphy = new GiphyFetch(process.env.REACT_APP_GIPHY_KEY);\n\nfunction App() {\n  _s();\n\n  const [text, setText] = useState('');\n  const [results, setResults] = useState([]);\n  const [err, setErr] = useState(false);\n\n  const handleInput = e => {\n    setText(e.target.value);\n    console.log(\"key pressed\");\n  };\n\n  const handleSubmit = e => {\n    if (text.length === 0) {\n      //set error state to true\n      setErr(true);\n      return;\n    }\n\n    console.log(text);\n\n    const apiCall = async () => {\n      const res = await giphy.animate(text, {\n        limit: 20\n      });\n      console.log(res.data);\n      setResults(res.data);\n    };\n\n    apiCall();\n    setText('');\n    setErr(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Animated Text Generator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Type text into the form and hit submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"input-field\",\n      value: text,\n      onChange: handleInput,\n      onKeyDown: handleKeyDown\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"submit-btn\",\n      onClick: handleSubmit,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Error, {\n      isError: err,\n      text: \"need length longer than 0 for input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), results && /*#__PURE__*/_jsxDEV(TextList, {\n      gifs: results\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"aJWZyxPwu9K7/9IIALiYymVRCog=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/hiperb0re0/Documents/Dev/giphy-animated-text/src/App.js"],"names":["GiphyFetch","useState","TextList","Error","giphy","process","env","REACT_APP_GIPHY_KEY","App","text","setText","results","setResults","err","setErr","handleInput","e","target","value","console","log","handleSubmit","length","apiCall","res","animate","limit","data","handleKeyDown"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,qBAA3B;AACA,SAAQC,QAAR,QAAuB,OAAvB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAO,WAAP;;AAEA,MAAMC,KAAK,GAAG,IAAIJ,UAAJ,CAAeK,OAAO,CAACC,GAAR,CAAYC,mBAA3B,CAAd;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACY,GAAD,EAAMC,MAAN,IAAgBb,QAAQ,CAAC,KAAD,CAA9B;;AAEA,QAAMc,WAAW,GAAIC,CAAD,IAAO;AACzBN,IAAAA,OAAO,CAACM,CAAC,CAACC,MAAF,CAASC,KAAV,CAAP;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACD,GAHD;;AAKA,QAAMC,YAAY,GAAIL,CAAD,IAAO;AAC1B,QAAGP,IAAI,CAACa,MAAL,KAAgB,CAAnB,EAAsB;AAEpB;AACAR,MAAAA,MAAM,CAAC,IAAD,CAAN;AACA;AACD;;AAEDK,IAAAA,OAAO,CAACC,GAAR,CAAYX,IAAZ;;AAEA,UAAMc,OAAO,GAAG,YAAY;AAC1B,YAAMC,GAAG,GAAG,MAAMpB,KAAK,CAACqB,OAAN,CAAchB,IAAd,EAAoB;AAACiB,QAAAA,KAAK,EAAE;AAAR,OAApB,CAAlB;AACAP,MAAAA,OAAO,CAACC,GAAR,CAAYI,GAAG,CAACG,IAAhB;AACAf,MAAAA,UAAU,CAACY,GAAG,CAACG,IAAL,CAAV;AACD,KAJD;;AAMAJ,IAAAA,OAAO;AACPb,IAAAA,OAAO,CAAC,EAAD,CAAP;AACAI,IAAAA,MAAM,CAAC,KAAD,CAAN;AAED,GApBD;;AAsBA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAO,MAAA,SAAS,EAAC,aAAjB;AAA+B,MAAA,KAAK,EAAEL,IAAtC;AAA4C,MAAA,QAAQ,EAAEM,WAAtD;AAAmE,MAAA,SAAS,EAAEa;AAA9E;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAA+B,MAAA,OAAO,EAAEP,YAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF,eAKE,QAAC,KAAD;AAAO,MAAA,OAAO,EAAER,GAAhB;AAAqB,MAAA,IAAI,EAAC;AAA1B;AAAA;AAAA;AAAA;AAAA,YALF,EAMGF,OAAO,iBAAI,QAAC,QAAD;AAAU,MAAA,IAAI,EAAEA;AAAhB;AAAA;AAAA;AAAA;AAAA,YANd;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;;GA3CQH,G;;KAAAA,G;AA4CT,eAAeA,GAAf","sourcesContent":["import { GiphyFetch } from '@giphy/js-fetch-api'\nimport {useState} from 'react'\nimport TextList from './components/TextList'\nimport Error from './components/Error'\nimport './App.css';\n\nconst giphy = new GiphyFetch(process.env.REACT_APP_GIPHY_KEY)\n\nfunction App() {\n  const [text, setText] = useState('')\n  const [results, setResults] = useState([])\n  const [err, setErr] = useState(false)\n\n  const handleInput = (e) => {\n    setText(e.target.value)\n    console.log(\"key pressed\")\n  }\n\n  const handleSubmit = (e) => {\n    if(text.length === 0) {\n      \n      //set error state to true\n      setErr(true)\n      return\n    }\n\n    console.log(text)\n\n    const apiCall = async () => {\n      const res = await giphy.animate(text, {limit: 20})\n      console.log(res.data)\n      setResults(res.data)\n    }\n    \n    apiCall()\n    setText('')\n    setErr(false)\n\n  }\n  \n  return (\n    <div className=\"App\">\n      <h1>Animated Text Generator</h1>\n      <h3>Type text into the form and hit submit</h3>\n      <input className='input-field' value={text} onChange={handleInput} onKeyDown={handleKeyDown} />\n      <button className='submit-btn' onClick={handleSubmit}>Submit</button>\n      <Error isError={err} text=\"need length longer than 0 for input\"/>\n      {results && <TextList gifs={results} />}\n\n    </div>\n  );\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}