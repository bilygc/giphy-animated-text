{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar uuid_1 = require(\"uuid\");\n\nvar pingbackId = '';\nvar idLength = 16;\n/* istanbul ignore next */\n\nvar noUUIDRandom = function () {\n  var result = '';\n  var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  var charactersLength = characters.length;\n\n  for (var i = 0; i < idLength; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n\n  return result;\n};\n\nvar getPingbackId = function () {\n  // it exists in memory\n  if (!pingbackId) {\n    try {\n      // it exists in storage\n      pingbackId = sessionStorage.getItem('giphyPingbackId');\n    } catch (_) {}\n\n    if (!pingbackId) {\n      // we need to create it\n      var hexTime = new Date().getTime().toString(16); // was told to mimic what we had\n\n      try {\n        // React Native doesn't support uuid without a polyfill\n        pingbackId = (\"\" + hexTime + uuid_1.v4().replace(/-/g, '')).substring(0, idLength); // 16 character max\n      } catch (error) {\n        /* istanbul ignore next */\n        pingbackId = noUUIDRandom();\n      }\n\n      try {\n        // save in storage\n        sessionStorage.setItem('giphyPingbackId', pingbackId);\n      } catch (_) {}\n    }\n  }\n\n  return pingbackId;\n};\n\nexports.default = getPingbackId;","map":{"version":3,"sources":["../src/get-pingback-id.ts"],"names":[],"mappings":";;;;;;AAAA,IAAA,MAAA,GAAA,OAAA,CAAA,MAAA,CAAA;;AACA,IAAI,UAAU,GAAG,EAAjB;AAEA,IAAM,QAAQ,GAAG,EAAjB;AAEA;;AACA,IAAM,YAAY,GAAG,YAAA;AACjB,MAAI,MAAM,GAAG,EAAb;AACA,MAAM,UAAU,GAAG,gEAAnB;AACA,MAAM,gBAAgB,GAAG,UAAU,CAAC,MAApC;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,QAApB,EAA8B,CAAC,EAA/B,EAAmC;AAC/B,IAAA,MAAM,IAAI,UAAU,CAAC,MAAX,CAAkB,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,MAAL,KAAgB,gBAA3B,CAAlB,CAAV;AACH;;AACD,SAAO,MAAP;AACH,CARD;;AASA,IAAM,aAAa,GAAG,YAAA;AAClB;AACA,MAAI,CAAC,UAAL,EAAiB;AACb,QAAI;AACA;AACA,MAAA,UAAU,GAAG,cAAc,CAAC,OAAf,CAAuB,iBAAvB,CAAb;AACH,KAHD,CAGE,OAAO,CAAP,EAAU,CAAE;;AACd,QAAI,CAAC,UAAL,EAAiB;AACb;AACA,UAAM,OAAO,GAAG,IAAI,IAAJ,GAAW,OAAX,GAAqB,QAArB,CAA8B,EAA9B,CAAhB,CAFa,CAEqC;;AAClD,UAAI;AACA;AACA,QAAA,UAAU,GAAG,CAAA,KAAG,OAAH,GAAa,MAAA,CAAA,EAAA,GAAO,OAAP,CAAe,IAAf,EAAqB,EAArB,CAAb,EAAwC,SAAxC,CAAkD,CAAlD,EAAqD,QAArD,CAAb,CAFA,CAE4E;AAC/E,OAHD,CAGE,OAAO,KAAP,EAAc;AACZ;AACA,QAAA,UAAU,GAAG,YAAY,EAAzB;AACH;;AACD,UAAI;AACA;AACA,QAAA,cAAc,CAAC,OAAf,CAAuB,iBAAvB,EAA0C,UAA1C;AACH,OAHD,CAGE,OAAO,CAAP,EAAU,CAAE;AACjB;AACJ;;AACD,SAAO,UAAP;AACH,CAxBD;;AA0BA,OAAA,CAAA,OAAA,GAAe,aAAf","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar uuid_1 = require(\"uuid\");\nvar pingbackId = '';\nvar idLength = 16;\n/* istanbul ignore next */\nvar noUUIDRandom = function () {\n    var result = '';\n    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n    for (var i = 0; i < idLength; i++) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result;\n};\nvar getPingbackId = function () {\n    // it exists in memory\n    if (!pingbackId) {\n        try {\n            // it exists in storage\n            pingbackId = sessionStorage.getItem('giphyPingbackId');\n        }\n        catch (_) { }\n        if (!pingbackId) {\n            // we need to create it\n            var hexTime = new Date().getTime().toString(16); // was told to mimic what we had\n            try {\n                // React Native doesn't support uuid without a polyfill\n                pingbackId = (\"\" + hexTime + uuid_1.v4().replace(/-/g, '')).substring(0, idLength); // 16 character max\n            }\n            catch (error) {\n                /* istanbul ignore next */\n                pingbackId = noUUIDRandom();\n            }\n            try {\n                // save in storage\n                sessionStorage.setItem('giphyPingbackId', pingbackId);\n            }\n            catch (_) { }\n        }\n    }\n    return pingbackId;\n};\nexports.default = getPingbackId;\n//# sourceMappingURL=get-pingback-id.js.map"]},"metadata":{},"sourceType":"script"}