{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setRenditionScaleUpMaxPixels = void 0;\n\nvar log_1 = require(\"./log\");\n\nvar closestArea = function (width, height, renditions) {\n  var currentBest = Infinity;\n  var result; // sort the renditions so we can avoid scaling up low resolutions\n\n  renditions.forEach(function (rendition) {\n    var widthPercentage = rendition.width / width;\n    var heightPercentage = rendition.height / height; // a width percentage of 1 is exact, 2 is double, .5 half etc\n\n    var areaPercentage = widthPercentage * heightPercentage; // img could be bigger or smaller\n\n    var testBest = Math.abs(1 - areaPercentage); // the closer to 0 the better\n\n    if (testBest < currentBest) {\n      currentBest = testBest;\n      result = rendition;\n    }\n  });\n  return result;\n};\n\nvar SCALE_UP_MAX_PIXELS = 50;\n\nvar setRenditionScaleUpMaxPixels = function (pixels) {\n  log_1.Logger.debug(\"@giphy/js-util set rendition selection scale up max pixels to \" + pixels);\n  SCALE_UP_MAX_PIXELS = pixels;\n};\n\nexports.setRenditionScaleUpMaxPixels = setRenditionScaleUpMaxPixels;\n/**\n * Finds image rendition that best fits a given container preferring images\n * ##### Note: all renditions are assumed to have the same aspect ratio\n *\n * When we have a portrait target and landscape gif, we choose a higher rendition to match\n * the height of the portrait target, otherwise it's blurry (same applies for landscape to portrait)\n *\n * @name bestfit\n * @function\n * @param {Array.<Object>} renditions available image renditions each having a width and height property\n * @param {Number} width\n * @param {Number} height\n * @param {Number} scaleUpMaxPixels the maximum pixels an asset should be scaled up\n */\n\nfunction bestfit(renditions, width, height, scaleUpMaxPixels) {\n  if (scaleUpMaxPixels === void 0) {\n    scaleUpMaxPixels = SCALE_UP_MAX_PIXELS;\n  }\n\n  var largestRendition = renditions[0]; // filter out renditions that are smaller than the target width and height by scaleUpMaxPixels value\n\n  var testRenditions = renditions.filter(function (rendition) {\n    if (rendition.width * rendition.height > largestRendition.width * largestRendition.height) {\n      largestRendition = rendition;\n    }\n\n    return width - rendition.width <= scaleUpMaxPixels && height - rendition.height <= scaleUpMaxPixels;\n  }); // if all are too small, use the largest we have\n\n  if (testRenditions.length === 0) {\n    return largestRendition;\n  } // find the closest area of the filtered renditions\n\n\n  return closestArea(width, height, testRenditions);\n}\n\nexports.default = bestfit;","map":{"version":3,"sources":["../src/bestfit.ts"],"names":[],"mappings":";;;;;;;AACA,IAAA,KAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AAEA,IAAM,WAAW,GAAG,UAAC,KAAD,EAAgB,MAAhB,EAAgC,UAAhC,EAAwD;AACxE,MAAI,WAAW,GAAG,QAAlB;AACA,MAAI,MAAJ,CAFwE,CAGxE;;AACA,EAAA,UAAU,CAAC,OAAX,CAAmB,UAAC,SAAD,EAAsB;AACrC,QAAM,eAAe,GAAG,SAAS,CAAC,KAAV,GAAkB,KAA1C;AACA,QAAM,gBAAgB,GAAG,SAAS,CAAC,MAAV,GAAmB,MAA5C,CAFqC,CAGrC;;AACA,QAAM,cAAc,GAAG,eAAe,GAAG,gBAAzC,CAJqC,CAKrC;;AACA,QAAM,QAAQ,GAAG,IAAI,CAAC,GAAL,CAAS,IAAI,cAAb,CAAjB,CANqC,CAMS;;AAC9C,QAAI,QAAQ,GAAG,WAAf,EAA4B;AACxB,MAAA,WAAW,GAAG,QAAd;AACA,MAAA,MAAM,GAAG,SAAT;AACH;AACJ,GAXD;AAYA,SAAO,MAAP;AACH,CAjBD;;AAmBA,IAAI,mBAAmB,GAAG,EAA1B;;AACO,IAAM,4BAA4B,GAAG,UAAC,MAAD,EAAe;AACvD,EAAA,KAAA,CAAA,MAAA,CAAO,KAAP,CAAa,mEAAiE,MAA9E;AACA,EAAA,mBAAmB,GAAG,MAAtB;AACH,CAHM;;AAAM,OAAA,CAAA,4BAAA,GAA4B,4BAA5B;AAIb;;;;;;;;;;;;;AAaG;;AACH,SAAS,OAAT,CACI,UADJ,EAEI,KAFJ,EAGI,MAHJ,EAII,gBAJJ,EAIkD;AAA9C,MAAA,gBAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,gBAAA,GAAA,mBAAA;AAA8C;;AAEzC,MAAA,gBAAgB,GAAI,UAAU,CAAd,CAAc,CAA9B,CAFyC,CAG9C;;AACA,MAAM,cAAc,GAAG,UAAU,CAAC,MAAX,CAAkB,UAAA,SAAA,EAAS;AAC9C,QAAI,SAAS,CAAC,KAAV,GAAkB,SAAS,CAAC,MAA5B,GAAqC,gBAAgB,CAAC,KAAjB,GAAyB,gBAAgB,CAAC,MAAnF,EAA2F;AACvF,MAAA,gBAAgB,GAAG,SAAnB;AACH;;AACD,WAAO,KAAK,GAAG,SAAS,CAAC,KAAlB,IAA2B,gBAA3B,IAA+C,MAAM,GAAG,SAAS,CAAC,MAAnB,IAA6B,gBAAnF;AACH,GALsB,CAAvB,CAJ8C,CAU9C;;AACA,MAAI,cAAc,CAAC,MAAf,KAA0B,CAA9B,EAAiC;AAC7B,WAAO,gBAAP;AACH,GAb6C,CAc9C;;;AACA,SAAO,WAAW,CAAC,KAAD,EAAQ,MAAR,EAAgB,cAAhB,CAAlB;AACH;;AAED,OAAA,CAAA,OAAA,GAAe,OAAf","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setRenditionScaleUpMaxPixels = void 0;\nvar log_1 = require(\"./log\");\nvar closestArea = function (width, height, renditions) {\n    var currentBest = Infinity;\n    var result;\n    // sort the renditions so we can avoid scaling up low resolutions\n    renditions.forEach(function (rendition) {\n        var widthPercentage = rendition.width / width;\n        var heightPercentage = rendition.height / height;\n        // a width percentage of 1 is exact, 2 is double, .5 half etc\n        var areaPercentage = widthPercentage * heightPercentage;\n        // img could be bigger or smaller\n        var testBest = Math.abs(1 - areaPercentage); // the closer to 0 the better\n        if (testBest < currentBest) {\n            currentBest = testBest;\n            result = rendition;\n        }\n    });\n    return result;\n};\nvar SCALE_UP_MAX_PIXELS = 50;\nvar setRenditionScaleUpMaxPixels = function (pixels) {\n    log_1.Logger.debug(\"@giphy/js-util set rendition selection scale up max pixels to \" + pixels);\n    SCALE_UP_MAX_PIXELS = pixels;\n};\nexports.setRenditionScaleUpMaxPixels = setRenditionScaleUpMaxPixels;\n/**\n * Finds image rendition that best fits a given container preferring images\n * ##### Note: all renditions are assumed to have the same aspect ratio\n *\n * When we have a portrait target and landscape gif, we choose a higher rendition to match\n * the height of the portrait target, otherwise it's blurry (same applies for landscape to portrait)\n *\n * @name bestfit\n * @function\n * @param {Array.<Object>} renditions available image renditions each having a width and height property\n * @param {Number} width\n * @param {Number} height\n * @param {Number} scaleUpMaxPixels the maximum pixels an asset should be scaled up\n */\nfunction bestfit(renditions, width, height, scaleUpMaxPixels) {\n    if (scaleUpMaxPixels === void 0) { scaleUpMaxPixels = SCALE_UP_MAX_PIXELS; }\n    var largestRendition = renditions[0];\n    // filter out renditions that are smaller than the target width and height by scaleUpMaxPixels value\n    var testRenditions = renditions.filter(function (rendition) {\n        if (rendition.width * rendition.height > largestRendition.width * largestRendition.height) {\n            largestRendition = rendition;\n        }\n        return width - rendition.width <= scaleUpMaxPixels && height - rendition.height <= scaleUpMaxPixels;\n    });\n    // if all are too small, use the largest we have\n    if (testRenditions.length === 0) {\n        return largestRendition;\n    }\n    // find the closest area of the filtered renditions\n    return closestArea(width, height, testRenditions);\n}\nexports.default = bestfit;\n//# sourceMappingURL=bestfit.js.map"]},"metadata":{},"sourceType":"script"}